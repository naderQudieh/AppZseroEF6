// <auto-generated />
using System;
using Bridge.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Bridge.Data.Migrations
{
    [DbContext(typeof(BridgeDbContext))]
    [Migration("20200827122823_addData27082020")]
    partial class addData27082020
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Bridge.Model.Category", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Logo");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Logo = "files/images/categories/giam-mo.png",
                            Name = "Giảm Mỡ"
                        },
                        new
                        {
                            Id = 2L,
                            Logo = "files/images/categories/phuc-hoi.png",
                            Name = "Phục hồi"
                        },
                        new
                        {
                            Id = 3L,
                            Logo = "files/images/categories/sinh-ly.png",
                            Name = "Sinh lý"
                        },
                        new
                        {
                            Id = 4L,
                            Logo = "files/images/categories/tang-can-co.png",
                            Name = "Tăng cân & cơ"
                        },
                        new
                        {
                            Id = 5L,
                            Logo = "files/images/categories/tang-co.png",
                            Name = "Tăng cơ"
                        },
                        new
                        {
                            Id = 6L,
                            Logo = "files/images/categories/tang-suc.png",
                            Name = "Tăng sức"
                        });
                });

            modelBuilder.Entity("Bridge.Model.Collection", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Banner");

                    b.Property<DateTime>("EndDate");

                    b.Property<string>("Name");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("Id");

                    b.ToTable("Collections");
                });

            modelBuilder.Entity("Bridge.Model.CollectionProduct", b =>
                {
                    b.Property<long>("ProductId");

                    b.Property<long>("CollectionId");

                    b.HasKey("ProductId", "CollectionId");

                    b.HasIndex("CollectionId");

                    b.ToTable("CollectionProducts");
                });

            modelBuilder.Entity("Bridge.Model.DeliveryStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<int>("Priority");

                    b.HasKey("Id");

                    b.ToTable("DeliveryStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Bridge Shop has received the order",
                            Priority = 0
                        },
                        new
                        {
                            Id = 2L,
                            Name = "This products is ready to ship",
                            Priority = 5
                        },
                        new
                        {
                            Id = 3L,
                            Name = "The shipper has taken from the repositories",
                            Priority = 5
                        },
                        new
                        {
                            Id = 4L,
                            Name = "The shipper is on his way to you",
                            Priority = 5
                        },
                        new
                        {
                            Id = 5L,
                            Name = "Delivery successful",
                            Priority = 10
                        },
                        new
                        {
                            Id = 7L,
                            Name = "This order has been cancel by Bridge Shop! Sorry about this case.",
                            Priority = -10
                        },
                        new
                        {
                            Id = 8L,
                            Name = "The shipper is busy now",
                            Priority = -5
                        },
                        new
                        {
                            Id = 9L,
                            Name = "This products are out of stock",
                            Priority = -10
                        },
                        new
                        {
                            Id = 10L,
                            Name = "This order has been cancel by customer",
                            Priority = -10
                        });
                });

            modelBuilder.Entity("Bridge.Model.Gender", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Genders");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Male"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "FeMale"
                        });
                });

            modelBuilder.Entity("Bridge.Model.MyUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("CompanyAddress");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("DeviceId");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FullName");

                    b.Property<string>("HomeAddress");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Bridge.Model.Order", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<string>("BuyerId");

                    b.Property<int>("CurrentStatus");

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("Note");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("Receiver");

                    b.Property<double>("TotalAmount");

                    b.HasKey("Id");

                    b.HasIndex("BuyerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Bridge.Model.OrderDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment");

                    b.Property<long>("OrderId");

                    b.Property<long>("ProductId");

                    b.Property<int>("Quantity");

                    b.Property<string>("Size");

                    b.Property<string>("Smell");

                    b.Property<float?>("Star");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("Bridge.Model.OrderStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreate");

                    b.Property<long>("OrderId");

                    b.Property<long>("StatusId");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("StatusId");

                    b.ToTable("OrderStatuses");
                });

            modelBuilder.Entity("Bridge.Model.Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CategoryId");

                    b.Property<double>("CurrentPrice");

                    b.Property<DateTime>("DateSale");

                    b.Property<string>("Description");

                    b.Property<long>("GenderId");

                    b.Property<bool>("IsSale");

                    b.Property<string>("Name");

                    b.Property<double>("OldPrice");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("GenderId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Bridge.Model.ProductImage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FilePath");

                    b.Property<bool>("IsHighLight");

                    b.Property<int>("Order");

                    b.Property<long>("ProductId");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("Bridge.Model.ProductSmell", b =>
                {
                    b.Property<long>("SmellId");

                    b.Property<long>("ProductId");

                    b.HasKey("SmellId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductSmells");
                });

            modelBuilder.Entity("Bridge.Model.Size", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("GenderId");

                    b.Property<string>("Name");

                    b.Property<string>("Standard");

                    b.HasKey("Id");

                    b.HasIndex("GenderId");

                    b.ToTable("Sizes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            GenderId = 1L,
                            Name = "Lbs5"
                        },
                        new
                        {
                            Id = 2L,
                            GenderId = 1L,
                            Name = "Lbs10"
                        },
                        new
                        {
                            Id = 3L,
                            GenderId = 2L,
                            Name = "Lbs3"
                        },
                        new
                        {
                            Id = 4L,
                            GenderId = 2L,
                            Name = "Lbs6.6"
                        });
                });

            modelBuilder.Entity("Bridge.Model.Smell", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("B");

                    b.Property<int>("G");

                    b.Property<string>("Name");

                    b.Property<int>("O");

                    b.Property<int>("R");

                    b.HasKey("Id");

                    b.ToTable("Smell");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            B = 70,
                            G = 63,
                            Name = "Chocolate Fudge",
                            O = 1,
                            R = 80
                        },
                        new
                        {
                            Id = 2L,
                            B = 70,
                            G = 63,
                            Name = "Vanilla",
                            O = 1,
                            R = 80
                        },
                        new
                        {
                            Id = 3L,
                            B = 70,
                            G = 63,
                            Name = "Chocolate Peanut Butter",
                            O = 1,
                            R = 80
                        },
                        new
                        {
                            Id = 4L,
                            B = 70,
                            G = 63,
                            Name = "Cookies & Crème",
                            O = 1,
                            R = 80
                        },
                        new
                        {
                            Id = 5L,
                            B = 70,
                            G = 63,
                            Name = "Strawberry Milkshake",
                            O = 1,
                            R = 80
                        },
                        new
                        {
                            Id = 6L,
                            B = 70,
                            G = 63,
                            Name = "Cafe Mocha",
                            O = 1,
                            R = 80
                        },
                        new
                        {
                            Id = 7L,
                            B = 70,
                            G = 63,
                            Name = "Frozen Banana",
                            O = 1,
                            R = 80
                        });
                });

            modelBuilder.Entity("Bridge.Model.UserAddress", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<bool>("IsHome");

                    b.Property<string>("Name");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserAddresses");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Bridge.Model.CollectionProduct", b =>
                {
                    b.HasOne("Bridge.Model.Collection", "Collection")
                        .WithMany("CollectionProducts")
                        .HasForeignKey("CollectionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Bridge.Model.Product", "Product")
                        .WithMany("CollectionProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Bridge.Model.Order", b =>
                {
                    b.HasOne("Bridge.Model.MyUser", "MyUser")
                        .WithMany("Orders")
                        .HasForeignKey("BuyerId");
                });

            modelBuilder.Entity("Bridge.Model.OrderDetail", b =>
                {
                    b.HasOne("Bridge.Model.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Bridge.Model.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Bridge.Model.OrderStatus", b =>
                {
                    b.HasOne("Bridge.Model.Order", "Order")
                        .WithMany("OrderStatuses")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Bridge.Model.DeliveryStatus", "Status")
                        .WithMany("OrderStatuses")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Bridge.Model.Product", b =>
                {
                    b.HasOne("Bridge.Model.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Bridge.Model.Gender", "Gender")
                        .WithMany("Products")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Bridge.Model.ProductImage", b =>
                {
                    b.HasOne("Bridge.Model.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Bridge.Model.ProductSmell", b =>
                {
                    b.HasOne("Bridge.Model.Product", "Product")
                        .WithMany("Smells")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Bridge.Model.Smell", "Smell")
                        .WithMany("ProductSmells")
                        .HasForeignKey("SmellId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Bridge.Model.Size", b =>
                {
                    b.HasOne("Bridge.Model.Gender", "Gender")
                        .WithMany("Sizes")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Bridge.Model.UserAddress", b =>
                {
                    b.HasOne("Bridge.Model.MyUser", "MyUser")
                        .WithMany("Addresses")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Bridge.Model.MyUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Bridge.Model.MyUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Bridge.Model.MyUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Bridge.Model.MyUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
